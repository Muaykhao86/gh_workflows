name: "Terraform PR Checks"

on:
  pull_request:
    branches:
      - main

env:
  TERRAFORM_DIR: "automation/terraform/"
  LAMBDA_DIR: "automation/aws_lambda/"
  CCOE_DIR: "automation/terraform/"
  # CCOE_MODULES_DIR: "automation/terraform/ccoe/modules/"

jobs:
  # Need to expose the env vars so we can pass it to the reusable workflow
  vars:
    name: "Compute Variables"
    runs-on: ubuntu-latest
    outputs:
      terraform_dir: ${{ env.TERRAFORM_DIR }}
      lambda_dir: ${{ env.LAMBDA_DIR }}
      ccoe_dir: ${{ env.CCOE_DIR }}
      ccoe_modules_dir: ${{ env.CCOE_MODULES_DIR }}
    steps:
      - run: echo "Exposing env vars"

  check_dirs_changes:
    uses: ./.github/workflows/check_directory_diff.yaml
    needs: vars
    with: 
      dirs: "${{ needs.vars.outputs.terraform_dir }},${{ needs.vars.outputs.lambda_dir }}"

  terraform_pr_checks:
    name: "Terraform PR Checks"
    runs-on: ubuntu-latest
    needs: [check_dirs_changes, vars]
    if: ${{ contains(needs.check_dirs_changes.outputs.directories_changed, needs.vars.outputs.terraform_dir) }}
    steps:
      - name: test
        run: |
          echo ${{ needs.check_dirs_changes.outputs.directories_changed }}
          echo ${{ needs.vars.outputs.terraform_dir }}
          echo ${{ contains(needs.check_dirs_changes.outputs.directories_changed, needs.vars.outputs.terraform_dir) }}
          echo "Terraform changes detected"
      # - name: Checkout
      #   uses: actions/checkout@v4

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      # - name: Run Terraform Format Check
      #   id: FMT
      #   working-directory: ${{ env.TERRAFORM_DIR }}
      #   run: terraform fmt -recursive -check
        
      # - name: Run Terraform Init
      #   working-directory: ${{ env.CCOE_DIR }}
      #   run: terraform init -backend=false
      
      # - name: Run Terraform Validation Check
      #   id: Validate
      #   working-directory: ${{ env.CCOE_DIR }}
      #   run: terraform validate

      # - name: Detect Specific Module Changes
      #   id: Filter
      #   run: |
      #     # Initialize variables
      #     modules_base="${{ needs.vars.outputs.ccoe_modules_dir }}"
      #     filter_paths=""
          
      #     # Modules to check for changes
      #       modules=(
      #       "auto_scaling_group"
      #       "baseline"
      #       "compute"
      #       "container"
      #       "databases"
      #       "networking"
      #       "storage"
      #       "databases"
      #       "load_balancers"
      #       "machine_learning"
      #       "machine_learning"
      #       "network"
      #       "security"
      #       "serverless_functions",
      #       "storage"
      #       )
          
      #     # Check if any module has changed
      #     for module in "${modules[@]}"; do
      #       module_path="${modules_base}${module}"

            
      #       for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      #       if [[ $file == ${module_path}/* ]]; then
      #           if [[ -n "$filter_paths=""" ]]; then
      #             filter_paths+=","
      #           fi
         
      #           filter_paths+="$module_path"
      #           break
      #       fi
            
      #       # Append to filtered modules if changed
      #       if [[ $module_changed == true ]]; then
              
      #       fi
      #     done
          
      #     # Output the JSON object of changed modules
      #     changed_modules=$(cat module_changes.txt | sed 's/module_changes=//')
      #     echo "changed_modules=${changed_modules}" >> $GITHUB_OUTPUT
      #     echo "any_changed=${any_changed}" >> $GITHUB_OUTPUT

      # - name: Run Terraform Test
      #   id: Test
      #   if: ${{ steps.Filter.outputs.any_changed == 'true' }}
      #   working-directory: ${{ env.CCOE_DIR }}
      #   run: |
      #     # Initialize variables
      #     changed_modules="${{ steps.Filter.outputs.changed_modules }}"
          
      #     # Run tests for each module
      #     for module in $changed_modules; do
      #       terraform test -module-path=$module
      #     done
    
  # ! If terraform changes run tf tests
  lambda_pr_checks:
    name: "Lambda PR Checks"
    runs-on: ubuntu-latest
    needs: [check_dirs_changes, vars]
    if: ${{ contains(needs.check_dirs_changes.outputs.directories_changed, needs.vars.outputs.lambda_dir) }}
    steps:
      - name: Expose env vars
        id: vars
        run: |
          normal="\033[0m"
          green="\033[0;32m"
          yellow="\033[0;33m"
          echo "normal=${normal}" >> $GITHUB_ENV
          echo "green=${green}" >> $GITHUB_ENV
          echo "yellow=${yellow}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Identify changed lambda directories
        id: lambda_changes
        run: |
          # Get all changed files
          CHANGED_FILES="${{ needs.check_dirs_changes.outputs.all_changed_files }}"
          LAMBDA_BASE_DIR="${{ needs.vars.outputs.lambda_dir }}"
          echo -e "${green}Analyzing changed files for Lambda functions...${normal}"
          
          # Create an array to store lambda directories
          old_IFS=$IFS
          IFS=','
          LAMBDA_DIRS=()
          # Extract lambda function directories
          for file in ${CHANGED_FILES[@]}; do
            echo -e "${green}Checking $file"
            # Is the file in the base lambda dir?
            if [[ $file == $LAMBDA_BASE_DIR* ]]; then
              echo -e "${green}File: ${normal}$file"

              # Extract the lambda function directory (assumes structure like automation/aws_lambda/function-name/*)
              lambda_dir=$(echo "$file" | awk -F/ '{print $1"/"$2"/"$3}')
              # Check if we already added this directory to the list
              if [[ ! " ${LAMBDA_DIRS[@]} " =~ " ${lambda_dir} " ]]; then
                LAMBDA_DIRS+=("$lambda_dir")
                echo -e "${green}Found changes in Lambda function: ${normal}${lambda_dir}"
              fi
            fi
          done
          
          # Expose the list of directories for later steps
          echo "lambda_dirs=${LAMBDA_DIRS[*]}" >> $GITHUB_OUTPUT
          echo "count=${#LAMBDA_DIRS[@]}" >> $GITHUB_OUTPUT
      
      - name: Process Lambda functions and test
        if: ${{ steps.lambda_changes.outputs.count > 0 }}
        env:
          lambda_dirs: ${{ steps.lambda_changes.outputs.lambda_dirs }}
          lambda_dir_count: ${{ steps.lambda_changes.outputs.count }}
          PYTHONPATH: '.'
        run: |
          echo -e "${green}Processing${normal} ${lambda_dir_count} ${green}Lambda functions${normal}"

          old_IFS=$IFS
          IFS=','
          for lambda_dir in ${lambda_dirs[@]}; do
            echo -e "${green}Checking runtime for${normal} $lambda_dir"
            
            # if it has a package.json its node
            if [ -f "$lambda_dir/package.json" ]; then
              echo -e "${green}Node.js Lambda detected in ${normal}${lambda_dir}"
              
              # Run Node.js specific tests
              cd $lambda_dir
              npm ci
              echo -e "${green}RUNNING NODE TESTS!!${normal}"
              npm run test
              cd -
              
            # if it as a requirements.txt its python, all dirs will have one or the other if there are tests
            elif [ -f "$lambda_dir/requirements.txt" ]; then
              echo -e "${green}Python Lambda detected in ${normal}${lambda_dir}"
              
              # Run Python specific tests
              cd $lambda_dir
              echo -e "${green}RUNNING PYTHON TESTS!!"
              pip install -r requirements.txt
              echo -e "${yellow}$running pytest${normal}"
              # pytest --cov -o log_cli=true
              cd -
              
            else
              echo -e "${yellow} No tests to run from $lambda_dir${normal}"
            fi
          done